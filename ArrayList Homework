package assignments;


import java.util.Arrays;
import java.util.Objects;

public class MyArrayListTester {
    public static void main(String[] args) {
    
    	MyArrayList myArrayList = new MyArrayList(5);
        System.out.println("List size ->"+myArrayList.size());
        myArrayList.add(new String("Test0"));
        myArrayList.add(new String("Test1"));
        myArrayList.add(new String("Test2"));
        myArrayList.add(new String("Test3"));
        myArrayList.add(new String("Test4"));
        myArrayList.add(new String("Test5"));
        System.out.println("List size ->"+myArrayList.size());
        System.out.println("Get obj @ 0 ->"+myArrayList.get(0));
        System.out.println("Get obj @ 4 ->"+myArrayList.get(4));
        System.out.println("printed array is"+myArrayList.printArray()); 
        System.out.println("Reverse Order of Array is"+myArrayList.reverseOrder());
        	
        	
    }
}

class MyArrayList {

   private static Object[] dataStore;

   private static final int INITIAL_CAPACITY = 10;

   private int size = 0;

    public MyArrayList() {
        dataStore = new Object[INITIAL_CAPACITY];
    }

    public MyArrayList(int initialCapacity) {
        dataStore = new Object[initialCapacity];
    }

    // + add
    public void add(Object obj) {
        // if the array is already full, then how will you add the new element into it ? -- homework
        if(size == dataStore.length) {
            increaseCapacity();
        }
        System.out.println("Capacity->"+ dataStore.length);
        dataStore[size] = obj;
        size++;
    }

    // + set by index
    public void set(Object obj, int index) {
        dataStore[index] = obj;
    }

    // print all the elements in the ArrayList -- homework
    public static Object printArray() {
    
    	for(int i=0; i<dataStore.length; i++){
    	
		return dataStore[i];
        }
    	return dataStore;
    }
    

    // + get by index
    public Object get(int index) {
        return dataStore[index];
    }

      
    // + size
    public int size(){
        return this.size;
    }

    // Reverse a order of data in the list --homework
    public static String[] reverseOrder() {
    	String[] reverse= { };
    	int length= dataStore.length;
    	for(int i=length-1;i>=0; i--) {
    		reverse = (String[]) dataStore[i];
    	}
    	return reverse;
    	
    }
   

    // Implement binary search for the ArrayList --homework

    public int binarySearch(String[] dataStore) {
        int key = 0;
        int start = 0;
        int end = dataStore.length - 1;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (key == mid) {
                return mid;
            }
            if (key < mid) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }
  

    // - increaseCapacity - double the size of capacity
    private void increaseCapacity() {
        // copy the existing data to new Array that has more size
        dataStore = Arrays.copyOf(dataStore, (dataStore.length * 2));
    }

}
